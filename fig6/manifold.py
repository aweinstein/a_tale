import sys
from collections import defaultdict

import numpy as np
import networkx as nx
from sklearn import manifold
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def get_vectors(G):
    """Get the vector representation of all the documents in G.

    parameters
    ----------
    G : A networkx digraph generated by wiki_crawl.py

    returns
    -------
    M : A n-by-m matrix, where n is the dimension of the document vector space
       and m is the number of documents.
    """

    nodes = G.nodes(data='true')
    m = len(nodes)
    n = len(nodes[0][1]['v'])

    M = np.zeros((n,m))
    for i, n in enumerate(nodes):
        v = np.array([e[1] for e in n[1]['v']])
        M[:,i] = v

    return M

def plot_edges(G, labels, Y, ax, alpha=0.05):
    for edge in G.edges():
        u = labels.index(edge[0])
        v = labels.index(edge[1])
        x0, x1 = Y[u,0], Y[v,0]
        y0, y1 = Y[u,1], Y[v,1]
        z0, z1 = Y[u,2], Y[v,2]
        ax.plot([x0,x1], [y0,y1], [z0,z1], c=[0.9,0.0,0.0], alpha=alpha)

def make_figure(X, G):
    n_neighbors = 5
    out_dim = 3
    Y = manifold.Isomap(n_neighbors, out_dim,
                        eigen_solver='dense').fit_transform(X)
    labels = G.nodes()

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    plot_edges(G, labels, Y, ax, alpha=0.2)
    ax.scatter(Y[:, 0], Y[:, 1], Y[:, 2], picker=1, s=40, color='k')

    # Show the label of the following points
    show_labels = ['Water', 'Salt water', 'Fresh water', 'Lake', 'River',
                   'Drink', 'Rain', 'Sea', 'Snow']
    i_show = [labels.index(lab) for lab in show_labels]
    for i, lab in zip(i_show, show_labels):
        ax.text(Y[i,0], Y[i,1], Y[i,2], lab, color='k', fontsize=18)

    min_x = Y[i_show,0].min()
    max_x = Y[i_show,0].max()
    min_y = Y[i_show,1].min()
    max_y = Y[i_show,1].max()
    min_z = Y[i_show,2].min()
    max_z = Y[i_show,2].max()

    x_mar, y_mar, z_mar = 0.2, 0.0, 0.05
    ax.set_xlim(min_x - x_mar, max_x + x_mar)
    ax.set_ylim(min_y - y_mar, max_y + y_mar)
    ax.set_zlim(min_z - z_mar, max_z + z_mar)
    plt.gcf().subplots_adjust(top=1, bottom=0, left=0, right=1)

    fn = 'isomap_lsa.pdf'
    plt.savefig(fn)
    print 'Figure saved in file', fn

if __name__ == '__main__':
    fname = 'army_500_graph.pickle'
    G = nx.read_gpickle(fname)
    labels = G.nodes()
    X = get_vectors(G).T
    make_figure(X, G)
